{"version":3,"sources":["ActionTypes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Gallery","window","AudioContext","webkitAudioContext","steps","duration","GalleryNames","study","court","niche","bridge","defaultGalleryParam","location","hash","slice","defaultAppState","iteration","gallery","Object","keys","includes","offset","modal","appStateReducer","state","action","type","undefined","dialSoftly","elt","target","initial","volume","increment","i","setTimeout","Math","min","max","App","useReducer","dispatch","audioElements","useRef","useEffect","destroy","setInterval","current","currentTime","previousIteration","currentIteration","floor","ITERATION_DURATION","clearInterval","fractionComplete","className","onClick","play","map","key","ref","loop","preload","controls","src","c","String","padStart","gridArea","style","position","top","left","width","borderTop","right","height","borderRight","bottom","borderBottom","borderLeft","filter","forEach","g","pause","description","atTime","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.861494cd.chunk.js","sourcesContent":["import { AudioFragment } from \"./AudioFragment\";\nimport { ItemProgress } from \"./DownloadManager\";\nimport { PlaybackStatus } from \"./PlaybackManager\";\n\nexport enum Gallery {\n  study,\n  court,\n  niche,\n  bridge,\n}\n\n\nexport type ActionTypes =\n  | { type: \"beginPlayback\" }\n  | { type: \"pickIteration\"; selectedIteration: number }\n  | { type: \"pickTime\"; subtype: \"a\"; selectedTime: number }\n  | { type: \"downloadStatus\"; progress: ItemProgress<AudioFragment>[] }\n  | { type: \"playbackStatus\"; offset: number }\n  | { type: \"dismissModal\"; }\n  | { type: \"requestGallery\"; gallery: Gallery }\n  | { type: \"requestIteration\"; iteration: number }\n  | { type: \"rollOverToIteration\"; iteration: number };\n","import React, { useEffect, useReducer, useRef } from \"react\";\nimport { ActionTypes, Gallery } from \"./ActionTypes\";\nimport \"./App.css\"\n\nconst audioContext: AudioContext = new ((window as any).AudioContext ||\n  (window as any).webkitAudioContext)();\n\ntype Modal = \"Welcome\" | \"Map\" | \"Passage\";\n\nconst GalleryNames: [string, Gallery][] = [\n  [\"Objects Study Room\", Gallery.study],\n  [\"Paige Court\", Gallery.court],\n  [\"Japanese Niche\", Gallery.niche],\n  [\"Bridge\", Gallery.bridge],\n]\n\nconst defaultGalleryParam = window.location.hash.slice(1);\n\nconst defaultGallery: Gallery = Object.keys(Gallery).includes(defaultGalleryParam) ?\n  (Gallery as any)[defaultGalleryParam] : Gallery.niche;\n\ntype AppState = {\n  iteration: number;\n  gallery: Gallery;\n  modal?: Modal;\n  offset: number;\n};\n\nconst defaultAppState: AppState = {\n  iteration: 0,\n  gallery: defaultGallery,\n  offset: 0,\n  modal: \"Welcome\"\n};\n\nconst appStateReducer = (state: AppState, action: ActionTypes): AppState => {\n  switch (action.type) {\n    case \"requestGallery\":\n      return { ...state, gallery: action.gallery};\n     case \"requestIteration\":\n      return { ...state, iteration: action.iteration || 0 };\n    case \"rollOverToIteration\":\n      return { ...state, iteration: action.iteration || 0 };\n    case \"playbackStatus\":\n      return { ...state, offset: action.offset};\n    case \"dismissModal\":\n      return { ...state, modal: undefined};\n    default:\n      return state;\n  }\n};\n\nconst PARALLEL_DOWNLOADS = 3\nconst PROGRESS_INTERVAL_MS = 50\n\n  const dialTo = (steps: number, duration: number) => (elt: HTMLAudioElement, target: number) => {\n    const initial = elt.volume\n    const increment = (target - initial) / steps\n    for (let i=0; i < steps; i++) {\n      setTimeout(() => elt.volume = Math.min(1, Math.max(0, initial + (i+1) * increment)) , i* duration / steps)\n    }\n  }\n\n  const dialSoftly = dialTo(10, 250)\n\n\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(appStateReducer, defaultAppState);\n\n  const audioElements: Record<Gallery, any> = {\n    [Gallery.study]: useRef<HTMLAudioElement>(null),\n    [Gallery.court]: useRef<HTMLAudioElement>(null),\n    [Gallery.niche]: useRef<HTMLAudioElement>(null),\n    [Gallery.bridge]: useRef<HTMLAudioElement>(null)\n  };\n\n  useEffect(() => {\n    let destroy = setInterval(()=> {\n      const offset = audioElements[state.gallery].current!.currentTime\n      dispatch({\n        type: \"playbackStatus\",\n        offset\n      })\n\n      const previousIteration = state.iteration\n      const currentIteration = Math.floor(offset/ITERATION_DURATION)\n      if (previousIteration !== currentIteration){\n        dispatch({\n          type: \"rollOverToIteration\",\n          iteration: currentIteration\n        })\n      }\n    }, PROGRESS_INTERVAL_MS)\n\n    return () => clearInterval(destroy)\n  }, [state.gallery, state.iteration])\n\n  const ITERATION_DURATION = 64.32 // 76;\n  const LOOKBACK_ON_SWITCH = 0;\n\n  const fractionComplete = (state.offset % ITERATION_DURATION) / ITERATION_DURATION\n  const iterationList: number[] = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n\n  // iteration_duration = 64.32s\n  return (\n    <div className=\"App\">\n        {state.modal && <div className=\"modal\">\n          <div className=\"modal-content\">\n            <button\n              className=\"button start-button\"\n              onClick={() => {\n                audioElements[state.gallery].current!.play();\n                dispatch({type: \"dismissModal\"})\n              }}\n            >Begin</button>\n          </div></div>}\n\n      <div className=\"wrapper\">\n        <header className=\"header\"> I am standing in a museum... {false && Math.round(state.offset*100)/100}\n          {GalleryNames.map(([description, gallery]) => (\n            <audio key={gallery} ref={audioElements[gallery]} loop={true} preload=\"auto\" controls src={`${Gallery[gallery]}.mp3`} className=\"begin\" />\n          ))}\n        </header>\n        <div className=\"menu\"></div>\n        <div className=\"gutter\"></div>\n        {iterationList.map((i, c) => {\n          \n          const src = `icon-${Gallery[state.gallery]}-${String(c).padStart(2, '0')}.svg`\n          const gridArea = `iteration${Math.floor(c / 4)}${c % 4}`\n          const className = `iteration \n                ${state.iteration === i ? \"playing\" : \"\"}\n                gallery-${state.gallery}\n              `;\n\n          return (\n          <span \n            key={c}\n            className={className}\n            style={{ gridArea }}>\n              {i === state.iteration && <>\n              <div key=\"0\"  style={{\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                width: fractionComplete  < .25 ? `${(fractionComplete - 0) * 4 * 100}%` : \"100%\",\n                borderTop: \"1vmin solid black\"\n              }}></div>\n              <div key=\"1\"  style={{\n                position: \"absolute\",\n                right: 0,\n                top: 0,\n                height: fractionComplete  < .5 ? `${(fractionComplete - .25)*4 * 100}%` : \"100%\",\n                borderRight: \"1vmin solid black\"\n              }}></div>\n              <div key=\"2\"  style={{\n                position: \"absolute\",\n                bottom: 0,\n                right: 0,\n                width: fractionComplete  < .75 ? `${(fractionComplete - .50)*4 * 100}%` : \"100%\",\n                borderBottom: \"1vmin solid black\"\n              }}></div>\n              <div key=\"3\"  style={{\n                position: \"absolute\",\n                left: 0,\n                bottom: 0,\n                height: fractionComplete  < 1.0 ? `${(fractionComplete - .75)*4 * 100}%` : \"100%\",\n                borderLeft: \"1vmin solid black\"\n              }}></div>\n \n              </>}\n             \n              <img src={src} \n                onClick={() => {\n                  GalleryNames.filter(([desc,g]) => g!== state.gallery).forEach(([desc,g]) => audioElements[g].current!.pause())\n                  audioElements[state.gallery].current!.play()\n                  audioElements[state.gallery].current!.currentTime = ((audioElements[state.gallery].current!.currentTime - LOOKBACK_ON_SWITCH) % ITERATION_DURATION) + c * ITERATION_DURATION\n                  dispatch({\n                    type: \"requestIteration\",\n                    iteration: i\n                  })\n                }\n                }>\n          </img>\n          </span>\n        )}\n        )}\n        <footer className=\"footer\">\n          <div className=\"gallery-selection\">\n            {GalleryNames.map(([description, gallery]) => (\n              <button\n              key={gallery} \n              onClick={() => {\n                dispatch({\n                  type: \"requestGallery\",\n                  gallery\n                })\n                const atTime = audioElements[state.gallery].current!.currentTime;\n                GalleryNames.forEach(([desc,g]) => \n                {\n                  g !== gallery && dialSoftly(audioElements[g].current!, 0)\n                })\n                  audioElements[gallery].current!.currentTime = atTime\n                  audioElements[gallery].current!.play()\n                  dialSoftly(audioElements[gallery].current!, 1)\n              }}\n              className={`\n                ${state.gallery === gallery ? \"selected\" : \"default\"}\n                ${Gallery[state.gallery]}\n              `}>{description}</button>\n            ))}\n          </div>\n          <div>\n            Chazen et cetera. 2020.\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}