{"version":3,"sources":["ActionTypes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Gallery","audioContext","window","AudioContext","webkitAudioContext","GalleryNames","study","court","niche","bridge","defaultGalleryParam","location","hash","slice","defaultAppState","iteration","gallery","Object","keys","includes","offset","modal","appStateReducer","state","action","type","console","log","undefined","dialTo","duration","target","gainNode","gain","setTargetAtTime","currentTime","BorderProgress","fractionComplete","key","style","position","top","left","width","borderTop","right","height","borderRight","bottom","borderBottom","borderLeft","useGainedNode","useState","setGain","node","setNode","useCallback","audioNode","source","createMediaElementSource","createGain","connect","destination","getAudioElement","ref","App","useReducer","dispatch","audioElements","useEffect","destroy","setInterval","currentAudio","previousIteration","currentIteration","Math","floor","ITERATION_DURATION","clearInterval","className","onClick","resume","then","play","map","loop","preload","controls","src","i","c","String","padStart","gridArea","targetTime","description","atTime","nextAudio","forEach","g","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba02dcce.chunk.js","sourcesContent":["import { AudioFragment } from \"./AudioFragment\";\nimport { ItemProgress } from \"./DownloadManager\";\nimport { PlaybackStatus } from \"./PlaybackManager\";\n\nexport enum Gallery {\n  study,\n  court,\n  niche,\n  bridge,\n}\n\n\nexport type ActionTypes =\n  | { type: \"beginPlayback\" }\n  | { type: \"pickIteration\"; selectedIteration: number }\n  | { type: \"pickTime\"; subtype: \"a\"; selectedTime: number }\n  | { type: \"downloadStatus\"; progress: ItemProgress<AudioFragment>[] }\n  | { type: \"playbackStatus\"; offset: number }\n  | { type: \"dismissModal\"; }\n  | { type: \"requestGallery\"; gallery: Gallery }\n  | { type: \"requestIteration\"; iteration: number }\n  | { type: \"rollOverToIteration\"; iteration: number };\n","import React, { useEffect, useReducer, useRef, useCallback, useState, Ref, RefObject } from \"react\";\nimport { ActionTypes, Gallery } from \"./ActionTypes\";\nimport \"./App.css\"\n\nconst audioContext: AudioContext = new ((window as any).AudioContext ||\n  (window as any).webkitAudioContext)();\n\ntype Modal = \"Welcome\" | \"Map\" | \"Passage\";\n\nconst GalleryNames: [string, Gallery][] = [\n  [\"Objects Study Room\", Gallery.study],\n  [\"Paige Court\", Gallery.court],\n  [\"Japanese Niche\", Gallery.niche],\n  [\"Bridge\", Gallery.bridge],\n]\n\nconst defaultGalleryParam = window.location.hash.slice(1);\n\nconst defaultGallery: Gallery = Object.keys(Gallery).includes(defaultGalleryParam) ?\n  (Gallery as any)[defaultGalleryParam] : Gallery.niche;\n\ntype AppState = {\n  iteration: number;\n  gallery: Gallery;\n  modal?: Modal;\n  offset: number;\n};\n\nconst defaultAppState: AppState = {\n  iteration: 0,\n  gallery: defaultGallery,\n  offset: 0,\n  modal: \"Welcome\"\n};\n\nconst appStateReducer = (state: AppState, action: ActionTypes): AppState => {\n  if (action.type !== \"playbackStatus\")\n    console.log(action)\n  switch (action.type) {\n    case \"requestGallery\":\n      return { ...state, gallery: action.gallery };\n    case \"requestIteration\":\n      return { ...state, iteration: action.iteration || 0 };\n    case \"rollOverToIteration\":\n      return { ...state, iteration: action.iteration || 0 };\n    case \"playbackStatus\":\n      return { ...state, offset: action.offset };\n    case \"dismissModal\":\n      return { ...state, modal: undefined };\n    default:\n      return state;\n  }\n};\n\nconst PARALLEL_DOWNLOADS = 3\nconst PROGRESS_INTERVAL_MS = 50\n\nconst dialTo = (duration: number, target: number, gainNode: GainNode) => {\n  console.log(\"Ramping\", duration, target, gainNode)\n  gainNode.gain.setTargetAtTime(target, audioContext.currentTime, duration / 1000 / 3);\n  //gainNode.gain.value = target;\n}\n\n\nconst BorderProgress: React.FC<{ fractionComplete: number }> = ({ fractionComplete }) => (\n  <>\n    <div key=\"0\" style={{\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: fractionComplete < .25 ? `${(fractionComplete - 0) * 4 * 100}%` : \"100%\",\n      borderTop: \"1vmin solid black\"\n    }}></div>\n    <div key=\"1\" style={{\n      position: \"absolute\",\n      right: 0,\n      top: 0,\n      height: fractionComplete < .5 ? `${(fractionComplete - .25) * 4 * 100}%` : \"100%\",\n      borderRight: \"1vmin solid black\"\n    }}></div>\n    <div key=\"2\" style={{\n      position: \"absolute\",\n      bottom: 0,\n      right: 0,\n      width: fractionComplete < .75 ? `${(fractionComplete - .50) * 4 * 100}%` : \"100%\",\n      borderBottom: \"1vmin solid black\"\n    }}></div>\n    <div key=\"3\" style={{\n      position: \"absolute\",\n      left: 0,\n      bottom: 0,\n      height: fractionComplete < 1.0 ? `${(fractionComplete - .75) * 4 * 100}%` : \"100%\",\n      borderLeft: \"1vmin solid black\"\n    }}></div>\n  </>\n)\n\nconst useGainedNode = () => {\n\n  const [gain, setGain] = useState<GainNode | null>(null);\n  const [node, setNode] = useState<HTMLAudioElement>();\n  const ref = useCallback((audioNode: HTMLAudioElement) => {\n    console.log(\"GAining audio node\", audioNode);\n    const source = audioContext.createMediaElementSource(audioNode);\n    const gain = audioContext.createGain();\n    source.connect(gain);\n    gain.connect(audioContext.destination);\n    setGain(gain)\n    setNode(audioNode)\n  }, [])\n  return [ref, gain, node] as const\n}\n\nconst getAudioElement = (ref: any) => {\n  return ref[2] as (HTMLAudioElement | null)\n}\n\nconsole.log(\"ACState\", audioContext.state)\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(appStateReducer, defaultAppState);\n\n  const audioElements: Record<Gallery, readonly [Ref<HTMLAudioElement>, GainNode | null, HTMLAudioElement | undefined]> = {\n    [Gallery.study]: useGainedNode(),\n    [Gallery.court]: useGainedNode(),\n    [Gallery.niche]: useGainedNode(),\n    [Gallery.bridge]: useGainedNode()\n  };\n\n  useEffect(() => {\n    console.log(\"redo effect noAe\", audioElements[state.gallery])\n    let destroy = setInterval(() => {\n      const currentAudio = getAudioElement(audioElements[state.gallery])\n      if (currentAudio) {\n\n        const offset = currentAudio.currentTime\n        dispatch({\n          type: \"playbackStatus\",\n          offset\n        })\n\n        const previousIteration = state.iteration\n        const currentIteration = Math.floor(offset / ITERATION_DURATION)\n        if (previousIteration !== currentIteration) {\n          console.log(\"Rollover iteration\")\n          dispatch({\n            type: \"rollOverToIteration\",\n            iteration: currentIteration\n          })\n        }\n\n      }\n      else {\n        console.log(\"Waiting for curfnet audio.\")\n      }\n    }, PROGRESS_INTERVAL_MS)\n\n    return () => clearInterval(destroy)\n  }, [state.gallery, state.iteration, audioElements[state.gallery][2]])\n\n  const ITERATION_DURATION = 64.32 // 76;\n  const LOOKBACK_ON_SWITCH = 0;\n  const VOLUME_RAMP_TIME = 500;\n\n  const fractionComplete = (state.offset % ITERATION_DURATION) / ITERATION_DURATION\n  const iterationList: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n  // iteration_duration = 64.32s\n  return (\n    <div className=\"App\">\n      {state.modal && <div className=\"modal\">\n        <div className=\"modal-content\">\n          <button\n            className=\"button start-button\"\n            onClick={() => {\n              audioContext.resume().then(() => {\n                const currentAudio = getAudioElement(audioElements[state.gallery])\n                if (currentAudio) {\n                  currentAudio.play()\n                  dispatch({ type: \"dismissModal\" })\n                }\n              })\n            }}\n          >Begin</button>\n        </div></div>}\n\n      <div className=\"wrapper\">\n        <header className=\"header\"> I am standing in a museum... {false && Math.round(state.offset * 100) / 100}\n          {GalleryNames.map(([description, gallery]) => (\n            <audio key={gallery}\n              ref={audioElements[gallery][0]}\n              loop={true}\n              preload=\"auto\"\n              controls\n              src={`${Gallery[gallery]}.mp3`}\n              className=\"begin\" />\n          ))}\n        </header>\n        <div className=\"menu\"></div>\n        <div className=\"gutter\"></div>\n        {iterationList.map((i, c) => {\n\n          const src = `icon-${Gallery[state.gallery]}-${String(c).padStart(2, '0')}.svg`\n          const gridArea = `iteration${Math.floor(c / 4)}${c % 4}`\n          const className = `iteration \n                ${state.iteration === i ? \"playing\" : \"\"}\n                gallery-${state.gallery}\n              `;\n\n          return (\n            <span key={c} className={className} style={{ gridArea }}>\n              {i === state.iteration && <BorderProgress fractionComplete={fractionComplete}></BorderProgress>}\n\n              <img src={src}\n                onClick={() => {\n                  const currentAudio = getAudioElement(audioElements[state.gallery]);\n                  if (currentAudio) {\n                    currentAudio.play()\n                    const targetTime = currentAudio.currentTime - LOOKBACK_ON_SWITCH\n                    currentAudio.currentTime = (targetTime % ITERATION_DURATION) + c * ITERATION_DURATION\n                    dispatch({\n                      type: \"requestIteration\",\n                      iteration: i\n                    })\n\n                  }\n                }\n                }>\n              </img>\n            </span>\n          )\n        }\n        )}\n        <footer className=\"footer\">\n          <div className=\"gallery-selection\">\n            {GalleryNames.map(([description, gallery]) => (\n              <button\n                key={gallery}\n                onClick={() => {\n                  const currentAudio = getAudioElement(audioElements[state.gallery]);\n                  if (currentAudio) {\n                    const atTime = currentAudio.currentTime;\n                    console.log(\"Requeste gal at\", atTime)\n                    const nextAudio = getAudioElement(audioElements[gallery])!;\n                    nextAudio.currentTime = atTime\n                    nextAudio.play()\n                    GalleryNames.forEach(([desc, g]) => {\n                      g !== gallery && dialTo(VOLUME_RAMP_TIME, 0, audioElements[g][1]!)\n                    })\n                    dialTo(VOLUME_RAMP_TIME, 1, audioElements[gallery][1]!)\n\n                    dispatch({\n                      type: \"requestGallery\",\n                      gallery\n                    })\n                  }\n                }}\n                className={`\n                ${state.gallery === gallery ? \"selected\" : \"default\"}\n                ${Gallery[state.gallery]}\n              `}>{description}</button>\n            ))}\n          </div>\n          <div>\n            Chazen et cetera. 2020.\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}