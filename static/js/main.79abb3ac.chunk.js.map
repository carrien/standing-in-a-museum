{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["audioContext","window","AudioContext","webkitAudioContext","defaultAppState","progress","audioContextStatus","state","playbackStatus","appStateReducer","action","type","requestedIteration","iteration","status","App","useReducer","dispatch","audioElement","filter","p","finished","length","useRef","className","ref","preload","controls","src","map","c","i","icon","style","gridArea","Math","floor","key","onClick","current","play","currentTime","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8yBAQA,IAAMA,EAA6B,IAAMC,OAAeC,cACrDD,OAAeE,oBASZC,EAAkB,CACtBC,SAAU,GACVC,mBAAoBN,EAAaO,MACjCC,eAAgB,IAGZC,EAAkB,SAACF,EAAiBG,GACxC,OAAQA,EAAOC,MACb,IAAK,mBACH,OAAO,EAAP,GAAYJ,EAAZ,CAAmBK,mBAAoBF,EAAOG,YAC/C,IAAK,gBACJ,OAAO,EAAP,GAAYN,EAAZ,CAAmBD,mBAAoBN,EAAaO,QACtD,IAAK,iBACH,OAAO,EAAP,GAAYA,EAAZ,CAAmBF,SAAUK,EAAOL,WACtC,IAAK,iBACH,OAAO,EAAP,GAAYE,EAAZ,CAAmBC,eAAgBE,EAAOI,SAC5C,QACE,OAAOP,IAiDEQ,EA3CO,WAAO,IAAD,EACAC,qBAAWP,EAAiBL,GAD5B,mBACnBG,EADmB,KACZU,EADY,KAKpBC,GAHYX,EAAMF,SAASc,QAAO,SAAAC,GAAC,OAAIA,EAAEC,YAAUC,OAC3Cf,EAAMF,SAASiB,OAERC,iBAAyB,OACdA,kBAAO,SAACH,OAKxC,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,WACf,4BAAQA,UAAU,UAChB,2BAAOC,IAAKP,EAAcQ,QAAQ,OAAOC,UAAQ,EAACC,IAAI,qBAAqBJ,UAAU,WANjD,CAAC,CAAC,EAAG,kBAAmB,CAAC,EAAG,kBAAmB,CAAC,EAAG,kBAAmB,CAAC,EAAG,mBAQrGK,KAAI,WAAYC,GAAZ,uBAAEC,EAAF,KAAKC,EAAL,YACT,yBAAKR,UAAS,sCACRjB,EAAMK,qBAAuBmB,EAAI,UAAY,GADrC,oBAETH,IAAKI,EAAMC,MAAO,CACrBC,SAAS,YAAD,OAAcC,KAAKC,MAAMN,EAAE,IAA3B,OAAgCA,EAAE,IAE1CO,IAAKN,EACLO,QAAS,WACPpB,EAAaqB,QAASC,OACtBtB,EAAaqB,QAASE,aAAiBvB,EAAaqB,QAASE,YAAc,GAlB9D,MAkByFV,EACtGd,EAAS,CACPN,KAAM,mBACNE,UAAWkB,UAMvB,4BAAQP,UAAU,UAAlB,kCChEckB,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.79abb3ac.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useRef } from \"react\";\nimport { ActionTypes } from \"./ActionTypes\";\nimport { AudioFragment } from \"./AudioFragment\";\nimport { downloader, ItemProgress } from \"./DownloadManager\";\nimport { FragmentsToDownload } from \"./FragmentsToDownload\";\nimport PlaybackManager, { PlaybackRequest, PlaybackStatus } from \"./PlaybackManager\";\nimport \"./App.css\"\n\nconst audioContext: AudioContext = new ((window as any).AudioContext ||\n  (window as any).webkitAudioContext)();\n\ntype AppState = {\n  progress: ItemProgress<AudioFragment>[];\n  audioContextStatus: string;\n  playbackStatus: PlaybackStatus;\n  requestedIteration?: number;\n};\n\nconst defaultAppState = {\n  progress: [],\n  audioContextStatus: audioContext.state,\n  playbackStatus: {} as PlaybackStatus\n};\n\nconst appStateReducer = (state: AppState, action: ActionTypes): AppState => {\n  switch (action.type) {\n    case \"requestIteration\":\n      return { ...state, requestedIteration: action.iteration};\n     case \"beginPlayback\":\n      return { ...state, audioContextStatus: audioContext.state };\n    case \"downloadStatus\":\n      return { ...state, progress: action.progress };\n    case \"playbackStatus\":\n      return { ...state, playbackStatus: action.status };\n    default:\n      return state;\n  }\n};\n\nconst PARALLEL_DOWNLOADS=3\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(appStateReducer, defaultAppState);\n  const completed = state.progress.filter(p => p.finished).length;\n  const total = state.progress.length;\n\n  const audioElement = useRef<HTMLAudioElement>(null)\n  const dispatchPlaybackRequest = useRef((p: PlaybackRequest): void => {});\n\n  const ITERATION_DURATION = 76;\n  const iterationList: [number, string][] = [[0, \"sitting.01.png\"], [3, \"sitting.02.png\"], [5, \"sitting.03.png\"], [8, \"sitting.04.png\"]]\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n      <header className=\"header\">\n        <audio ref={audioElement} preload=\"auto\" controls src=\"sitting/output.mp3\" className=\"begin\"/>\n      </header>\n  {iterationList.map(([i, icon], c)=>(\n            <img className={`iteration \n                ${state.requestedIteration === i ? \"playing\" : \"\"}\n              `} src={icon} style={{\n              gridArea: `iteration${Math.floor(c/2)}${c%2}`\n            }}\n              key={i}\n              onClick={() => {\n                audioElement.current!.play()\n                audioElement.current!.currentTime  = ((audioElement.current!.currentTime - 2) % ITERATION_DURATION) + i*ITERATION_DURATION\n                dispatch({\n                  type: \"requestIteration\",\n                  iteration: i\n                })\n              }\n              }>\n            </img>\n            ))} \n      <footer className=\"footer\">\n          Chazen ï¼† cetera. 2020.\n        </footer>\n     </div> \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}